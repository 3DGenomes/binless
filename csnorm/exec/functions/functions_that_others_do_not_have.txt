dispersions.fn
<   vector range(int imin, int imax) {
<   int[] cumulative_hist(vector x, row_vector q) {
<   matrix bspl_gen(vector x, real dx, row_vector t, int q) {
<   int splinedegree() {return 3;} //set 3 for cubic spline
<   int nnz(int N) {return N*(splinedegree()+1);} //nonzero count for design matrix
<   row_vector vector_times_csr_matrix(int K, vector w, vector Xw, int[] Xv, int[] Xu) {
<   matrix bspline(vector x, int K, int q, real xmin, real xmax) {
<   int[] change_points(int[] Nvals, int levels) {
<   real neg_binomial_2_log_deviance(int[] y, vector log_mu, real alpha, vector weights) {
fit_decay.fn
<   int[] cumulative_hist(vector x, row_vector q) {
<   int nnz(int N) {return N*(splinedegree()+1);} //nonzero count for design matrix
<   row_vector vector_times_csr_matrix(int K, vector w, vector Xw, int[] Xv, int[] Xu) {
<   int[] change_points(int[] Nvals, int levels) {
<   real neg_binomial_2_log_deviance(int[] y, vector log_mu, real alpha, vector weights) {
fit_eC.fn
<   int[] cumulative_hist(vector x, row_vector q) {
<   int nnz(int N) {return N*(splinedegree()+1);} //nonzero count for design matrix
<   int[] change_points(int[] Nvals, int levels) {
<   real neg_binomial_2_log_deviance(int[] y, vector log_mu, real alpha, vector weights) {
fit_extradiag.fn
<   int[] cumulative_hist(vector x, row_vector q) {
<   int nnz(int N) {return N*(splinedegree()+1);} //nonzero count for design matrix
<   row_vector vector_times_csr_matrix(int K, vector w, vector Xw, int[] Xv, int[] Xu) {
<   int[] change_points(int[] Nvals, int levels) {
fit.fn
homogenize.fn
<   row_vector vector_times_csr_matrix(int K, vector w, vector Xw, int[] Xv, int[] Xu) {
<   matrix bspline(vector x, int K, int q, real xmin, real xmax) {
<   int[] change_points(int[] Nvals, int levels) {
<   real neg_binomial_2_log_deviance(int[] y, vector log_mu, real alpha, vector weights) {
predict_all.fn
<   int[] cumulative_hist(vector x, row_vector q) {
<   int nnz(int N) {return N*(splinedegree()+1);} //nonzero count for design matrix
<   int[] change_points(int[] Nvals, int levels) {
<   real neg_binomial_2_log_deviance(int[] y, vector log_mu, real alpha, vector weights) {
predict_binned.fn
<   int[] cumulative_hist(vector x, row_vector q) {
<   int nnz(int N) {return N*(splinedegree()+1);} //nonzero count for design matrix
<   row_vector vector_times_csr_matrix(int K, vector w, vector Xw, int[] Xv, int[] Xu) {
<   int[] change_points(int[] Nvals, int levels) {
<   real neg_binomial_2_log_deviance(int[] y, vector log_mu, real alpha, vector weights) {
>     while (ctr <= nmax && left != right) {
