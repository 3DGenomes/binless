
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace model_gfpca_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class model_gfpca : public prob_grad {
private:
    int N;
    int I;
    int D;
    int p;
    int Kt;
    int Kp;
    vector<int> Y;
    vector<int> subjId;
    vector<vector_d> X;
    matrix_d BS;
    matrix_d PenMat;
    vector_d mu_beta;
public:
    model_gfpca(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_gfpca_namespace::model_gfpca";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "I", "int", context__.to_vec());
        I = int(0);
        vals_i__ = context__.vals_i("I");
        pos__ = 0;
        I = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "p", "int", context__.to_vec());
        p = int(0);
        vals_i__ = context__.vals_i("p");
        pos__ = 0;
        p = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Kt", "int", context__.to_vec());
        Kt = int(0);
        vals_i__ = context__.vals_i("Kt");
        pos__ = 0;
        Kt = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Kp", "int", context__.to_vec());
        Kp = int(0);
        vals_i__ = context__.vals_i("Kp");
        pos__ = 0;
        Kp = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N));
        validate_non_negative_index("Y", "N", N);
        Y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("Y");
        pos__ = 0;
        size_t Y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < Y_limit_0__; ++i_0__) {
            Y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "subjId", "int", context__.to_vec(N));
        validate_non_negative_index("subjId", "N", N);
        subjId = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("subjId");
        pos__ = 0;
        size_t subjId_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < subjId_limit_0__; ++i_0__) {
            subjId[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("X", "I", I);
        validate_non_negative_index("X", "p", p);
        X = std::vector<vector_d>(I,vector_d(p));
        context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(I,p));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_i_vec_lim__ = p;
        for (size_t i_vec__ = 0; i_vec__ < X_i_vec_lim__; ++i_vec__) {
            size_t X_limit_0__ = I;
            for (size_t i_0__ = 0; i_0__ < X_limit_0__; ++i_0__) {
                X[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "BS", "matrix_d", context__.to_vec(N,Kt));
        validate_non_negative_index("BS", "N", N);
        validate_non_negative_index("BS", "Kt", Kt);
        BS = matrix_d(N,Kt);
        vals_r__ = context__.vals_r("BS");
        pos__ = 0;
        size_t BS_m_mat_lim__ = N;
        size_t BS_n_mat_lim__ = Kt;
        for (size_t n_mat__ = 0; n_mat__ < BS_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < BS_m_mat_lim__; ++m_mat__) {
                BS(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "PenMat", "matrix_d", context__.to_vec(Kt,Kt));
        validate_non_negative_index("PenMat", "Kt", Kt);
        validate_non_negative_index("PenMat", "Kt", Kt);
        PenMat = matrix_d(Kt,Kt);
        vals_r__ = context__.vals_r("PenMat");
        pos__ = 0;
        size_t PenMat_k_mat_lim__ = Kt;
        for (size_t n_mat__ = 0; n_mat__ < PenMat_k_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < PenMat_k_mat_lim__; ++m_mat__) {
                PenMat(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"I",I,0);
        check_greater_or_equal(function__,"D",D,0);
        check_greater_or_equal(function__,"p",p,0);
        stan::math::check_cov_matrix(function__,"PenMat",PenMat);
        validate_non_negative_index("mu_beta", "Kt", Kt);
        mu_beta = vector_d(Kt);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(mu_beta,DUMMY_VAR__);

        try {
            current_statement_begin__ = 31;
            for (int k = 1; k <= Kt; ++k) {
                current_statement_begin__ = 32;
                stan::math::assign(get_base1_lhs(mu_beta,k,"mu_beta",1), 0);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += p * Kt;
        num_params_r__ += Kp * Kt;
        num_params_r__ += Kp * I;
        num_params_r__ += p;
        num_params_r__ += Kp;
    }

    ~model_gfpca() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "matrix_d", context__.to_vec(p,Kt));
        matrix_d beta(p,Kt);
        for (int j2__ = 0U; j2__ < Kt; ++j2__)
            for (int j1__ = 0U; j1__ < p; ++j1__)
                beta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("beta_psi")))
            throw std::runtime_error("variable beta_psi missing");
        vals_r__ = context__.vals_r("beta_psi");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_psi", "matrix_d", context__.to_vec(Kp,Kt));
        matrix_d beta_psi(Kp,Kt);
        for (int j2__ = 0U; j2__ < Kt; ++j2__)
            for (int j1__ = 0U; j1__ < Kp; ++j1__)
                beta_psi(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta_psi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_psi: ") + e.what());
        }

        if (!(context__.contains_r("c")))
            throw std::runtime_error("variable c missing");
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("initialization", "c", "vector_d", context__.to_vec(I,Kp));
        std::vector<vector_d> c(I,vector_d(Kp));
        for (int j1__ = 0U; j1__ < Kp; ++j1__)
            for (int i0__ = 0U; i0__ < I; ++i0__)
                c[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < I; ++i0__)
            try {
            writer__.vector_unconstrain(c[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c: ") + e.what());
        }

        if (!(context__.contains_r("beta_sig")))
            throw std::runtime_error("variable beta_sig missing");
        vals_r__ = context__.vals_r("beta_sig");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_sig", "vector_d", context__.to_vec(p));
        vector_d beta_sig(p);
        for (int j1__ = 0U; j1__ < p; ++j1__)
            beta_sig(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,100,beta_sig);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_sig: ") + e.what());
        }

        if (!(context__.contains_r("psi_sig")))
            throw std::runtime_error("variable psi_sig missing");
        vals_r__ = context__.vals_r("psi_sig");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_sig", "vector_d", context__.to_vec(Kp));
        vector_d psi_sig(Kp);
        for (int j1__ = 0U; j1__ < Kp; ++j1__)
            psi_sig(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,100,psi_sig);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_sig: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta;
        (void) beta;   // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.matrix_constrain(p,Kt,lp__);
        else
            beta = in__.matrix_constrain(p,Kt);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta_psi;
        (void) beta_psi;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_psi = in__.matrix_constrain(Kp,Kt,lp__);
        else
            beta_psi = in__.matrix_constrain(Kp,Kt);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > c;
        size_t dim_c_0__ = I;
        c.reserve(dim_c_0__);
        for (size_t k_0__ = 0; k_0__ < dim_c_0__; ++k_0__) {
            if (jacobian__)
                c.push_back(in__.vector_constrain(Kp,lp__));
            else
                c.push_back(in__.vector_constrain(Kp));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta_sig;
        (void) beta_sig;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_sig = in__.vector_lub_constrain(0,100,p,lp__);
        else
            beta_sig = in__.vector_lub_constrain(0,100,p);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi_sig;
        (void) psi_sig;   // dummy to suppress unused var warning
        if (jacobian__)
            psi_sig = in__.vector_lub_constrain(0,100,Kp,lp__);
        else
            psi_sig = in__.vector_lub_constrain(0,100,Kp);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta_tau2(p);
        (void) beta_tau2;  // dummy to suppress unused var warning
        stan::math::fill(beta_tau2,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi_tau2(Kp);
        (void) psi_tau2;  // dummy to suppress unused var warning
        stan::math::fill(psi_tau2,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(beta_tau2,DUMMY_VAR__);
        stan::math::fill(psi_tau2,DUMMY_VAR__);

        try {
            current_statement_begin__ = 48;
            for (int pcur = 1; pcur <= p; ++pcur) {
                current_statement_begin__ = 49;
                stan::math::assign(get_base1_lhs(beta_tau2,pcur,"beta_tau2",1), pow(get_base1(beta_sig,pcur,"beta_sig",1),-(1)));
            }
            current_statement_begin__ = 52;
            for (int kcur = 1; kcur <= Kp; ++kcur) {
                current_statement_begin__ = 53;
                stan::math::assign(get_base1_lhs(psi_tau2,kcur,"psi_tau2",1), pow(get_base1(psi_sig,kcur,"psi_sig",1),-(1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < p; ++i0__) {
            if (stan::math::is_uninitialized(beta_tau2(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta_tau2" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Kp; ++i0__) {
            if (stan::math::is_uninitialized(psi_tau2(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi_tau2" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning
        check_greater_or_equal(function__,"beta_tau2",beta_tau2,0.01);
        check_greater_or_equal(function__,"psi_tau2",psi_tau2,0.01);

        // model body
        try {
            current_statement_begin__ = 64;
            for (int pcur = 1; pcur <= p; ++pcur) {
                current_statement_begin__ = 65;
                lp_accum__.add(inv_gamma_log<propto__>(get_base1(beta_sig,pcur,"beta_sig",1), 1, 1));
            }
            current_statement_begin__ = 70;
            for (int kcur = 1; kcur <= Kp; ++kcur) {
                current_statement_begin__ = 71;
                lp_accum__.add(inv_gamma_log<propto__>(get_base1(psi_sig,kcur,"psi_sig",1), 1, 1));
            }
            current_statement_begin__ = 76;
            for (int pcur = 1; pcur <= p; ++pcur) {
                current_statement_begin__ = 77;
                lp_accum__.add(multi_normal_prec_log<propto__>(transpose(get_base1(beta,pcur,"beta",1)), mu_beta, multiply(get_base1(beta_tau2,pcur,"beta_tau2",1),PenMat)));
            }
            current_statement_begin__ = 81;
            for (int kcur = 1; kcur <= Kp; ++kcur) {
                current_statement_begin__ = 82;
                lp_accum__.add(multi_normal_prec_log<propto__>(transpose(get_base1(beta_psi,kcur,"beta_psi",1)), mu_beta, multiply(get_base1(psi_tau2,kcur,"psi_tau2",1),PenMat)));
            }
            current_statement_begin__ = 86;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 87;
                lp_accum__.add(normal_log<propto__>(get_base1(c,i,"c",1), 0.0, 1.0));
            }
            current_statement_begin__ = 94;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 95;
                lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(Y,i,"Y",1), (multiply(multiply(get_base1(BS,i,"BS",1),transpose(beta)),get_base1(X,get_base1(subjId,i,"subjId",1),"X",1)) + multiply(multiply(get_base1(BS,i,"BS",1),transpose(beta_psi)),get_base1(c,get_base1(subjId,i,"subjId",1),"c",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("beta_psi");
        names__.push_back("c");
        names__.push_back("beta_sig");
        names__.push_back("psi_sig");
        names__.push_back("beta_tau2");
        names__.push_back("psi_tau2");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(Kt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kp);
        dims__.push_back(Kt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(Kp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kp);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_gfpca_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d beta = in__.matrix_constrain(p,Kt);
        matrix_d beta_psi = in__.matrix_constrain(Kp,Kt);
        vector<vector_d> c;
        size_t dim_c_0__ = I;
        for (size_t k_0__ = 0; k_0__ < dim_c_0__; ++k_0__) {
            c.push_back(in__.vector_constrain(Kp));
        }
        vector_d beta_sig = in__.vector_lub_constrain(0,100,p);
        vector_d psi_sig = in__.vector_lub_constrain(0,100,Kp);
        for (int k_1__ = 0; k_1__ < Kt; ++k_1__) {
            for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < Kt; ++k_1__) {
            for (int k_0__ = 0; k_0__ < Kp; ++k_0__) {
                vars__.push_back(beta_psi(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < Kp; ++k_1__) {
            for (int k_0__ = 0; k_0__ < I; ++k_0__) {
                vars__.push_back(c[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < p; ++k_0__) {
            vars__.push_back(beta_sig[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Kp; ++k_0__) {
            vars__.push_back(psi_sig[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d beta_tau2(p);
        (void) beta_tau2;  // dummy to suppress unused var warning
        vector_d psi_tau2(Kp);
        (void) psi_tau2;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 48;
            for (int pcur = 1; pcur <= p; ++pcur) {
                current_statement_begin__ = 49;
                stan::math::assign(get_base1_lhs(beta_tau2,pcur,"beta_tau2",1), pow(get_base1(beta_sig,pcur,"beta_sig",1),-(1)));
            }
            current_statement_begin__ = 52;
            for (int kcur = 1; kcur <= Kp; ++kcur) {
                current_statement_begin__ = 53;
                stan::math::assign(get_base1_lhs(psi_tau2,kcur,"psi_tau2",1), pow(get_base1(psi_sig,kcur,"psi_sig",1),-(1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"beta_tau2",beta_tau2,0.01);
        check_greater_or_equal(function__,"psi_tau2",psi_tau2,0.01);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < p; ++k_0__) {
            vars__.push_back(beta_tau2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Kp; ++k_0__) {
            vars__.push_back(psi_tau2[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_gfpca";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Kt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Kt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Kp; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_psi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Kp; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "c" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_sig" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Kp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_sig" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tau2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Kp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_tau2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Kt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Kt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Kp; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_psi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Kp; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "c" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_sig" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Kp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_sig" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tau2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Kp; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_tau2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace




#endif
